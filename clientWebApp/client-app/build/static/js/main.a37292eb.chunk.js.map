{"version":3,"sources":["logo.svg","Components/BNOA.js","Components/PITOT.jsx","Components/BMP/BMPT.js","Components/BMP/BMPA.js","Components/BMP/BMPP.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BNOA","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","x","y","z","XPoints","Array","fill","YPoints","ZPoints","data","setState","getData","that","socket","on","_ref","concat","toConsumableArray","slice","react_default","a","createElement","className","lib","textClassName","title","es","Component","labels","length","datasets","label","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","PITOT","speed","dist_default","maxValue","value","needleColor","startColor","segments","endColor","BMPT","temp","tempPoints","BMPA","alt","altPoints","BMPP","pres","presPoints","require","connect","reconnect","App","brand","right","s","m","Components_BNOA","Components_PITOT","BMP_BMPT","BMP_BMPP","BMP_BMPA","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a37292eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {Col,Row,Card} from \"react-materialize\"\n\nclass BNOA extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      x: 0,\n      y: 0,\n      z: 0,\n      XPoints: Array(1).fill(null),\n      YPoints: Array(1).fill(null),\n      ZPoints: Array(1).fill(null),\n      data: []\n    }\n  }\n  componentDidMount(){\n    this.setState({data: getData([])})\n\n  }\n  componentWillMount(){\n    var that = this\n    this.props.socket.on('BNOA', ({x,y,z})=>{\n      that.setState({\n        x: x,y: y,z: z,\n        XPoints: [...that.state.XPoints.slice(-10),x], //that.state.Xpoint.push(x)\n        YPoints: [...that.state.YPoints.slice(-10),y],\n        ZPoints: [...that.state.ZPoints.slice(-10),z],\n        data:getData(that.state.XPoints,that.state.YPoints,that.state.ZPoints)\n      });\n    });\n\n  }\n  render() {\n    return (\n      <div className=\"component\">\n          <Card className ='grey lighten-3' textClassName='grey-text' title='BNO A'>\n          <Line data={this.state.data}/>\n          <p className=\"center\">{this.state.x}, {this.state.y},{this.state.z}</p>\n          </Card>\n\n      </div>\n    );\n  }\n}\n\nconst getData =(XPoints,YPoints,ZPoints)=>({\n  labels: Array(XPoints.length).fill(\"\"),\n  datasets: [\n    {\n      label: 'BNOA x',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: XPoints\n    },\n    {\n      label: 'BNOA y',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: YPoints\n    },\n    {\n      label: 'BNOA z',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: ZPoints\n    }\n  ]\n});\n\nexport default BNOA;\n","import React, { Component } from 'react';\nimport {Card} from \"react-materialize\"\nimport ReactSpeedometer from \"react-d3-speedometer\"\n\nclass PITOT extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      speed: 0\n    }\n  }\n  componentDidMount(){\n\n  }\n  componentWillMount(){\n    var that = this\n    this.props.socket.on('PITOT', ({x})=>{\n      that.setState({\n        speed: x\n      });\n    });\n\n  }\n  render() {\n    return (\n      <div className=\"component\">\n          <Card className ='grey lighten-3' textClassName='grey-text' title='SPEED PITOT'>\n<ReactSpeedometer\n  maxValue={80}\n  value={this.state.speed}\n  needleColor=\"steelblue\"\n  startColor=\"green\"\n  segments={20}\n  endColor=\"red\"\n\n/>\n          <p className=\"center\">{this.state.speed} km/h</p>\n          </Card>\n\n      </div>\n    );\n  }\n}\n\nexport default PITOT;\n","import React, { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {Col,Row,Card} from \"react-materialize\"\n\nclass BMPT extends Component {\n    render() {\n        return (\n          <div className=\"component\">\n              <Card className ='grey lighten-3' textClassName='grey-text' title='Temperature'>\n              <Line data={this.state.data}/>\n              <p className=\"center\">{this.state.temp}</p>\n              </Card>\n          </div>\n        );\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n          temp: 0,\n          tempPoints: Array(1).fill(null),\n          data: []\n        }\n      }\n    \n    componentDidMount(){\n        this.setState({data: getData([])})\n    }\n\n    componentWillMount(){\n        var that = this\n        this.props.socket.on('BMP', ({temp})=>{\n          that.setState({\n            temp: temp,\n            tempPoints: [...that.state.tempPoints.slice(-10),temp], //that.state.Xpoint.push(x)\n            data:getData(that.state.tempPoints)\n          });\n        });\n    \n    }\n\n}\n\nexport default BMPT;\n\n\nconst getData =(tempPoints)=>({\n    labels: Array(tempPoints.length).fill(\"\"),\n    datasets: [\n      {\n        label: 'temperature',\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: tempPoints\n        }\n    ]\n})","import React, { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {Col,Row,Card} from \"react-materialize\"\n\nclass BMPA extends Component {\n    render() {\n        return (\n          <div className=\"component\">\n              <Card className ='grey lighten-3' textClassName='grey-text' title='Altitude'>\n              <Line data={this.state.data}/>\n              <p className=\"center\">{this.state.alt}</p>\n              </Card>\n          </div>\n        );\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n          alt: 0,\n          altPoints: Array(1).fill(null),\n          data: []\n        }\n      }\n    \n    componentDidMount(){\n        this.setState({data: getData([])})\n    }\n\n    componentWillMount(){\n        var that = this\n        this.props.socket.on('BMP', ({alt})=>{\n          that.setState({\n            alt: alt,\n            altPoints: [...that.state.altPoints.slice(-10),alt], //that.state.Xpoint.push(x)\n            data:getData(that.state.altPoints)\n          });\n        });\n    \n    }\n\n}\n\nexport default BMPA;\n\n\nconst getData =(altPoints)=>({\n    labels: Array(altPoints.length).fill(\"\"),\n    datasets: [\n      {\n        label: 'altitude',\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: altPoints\n        }\n    ]\n})","import React, { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {Col,Row,Card} from \"react-materialize\"\n\nclass BMPP extends Component {\n    render() {\n        return (\n          <div className=\"component\">\n              <Card className ='grey lighten-3' textClassName='grey-text' title='Pression'>\n              <Line data={this.state.data}/>\n              <p className=\"center\">{this.state.pres}</p>\n              </Card>\n          </div>\n        );\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n          pres: 0,\n          presPoints: Array(1).fill(null),\n          data: []\n        }\n      }\n    \n    componentDidMount(){\n        this.setState({data: getData([])})\n    }\n\n    componentWillMount(){\n        var that = this\n        this.props.socket.on('BMP', ({pres})=>{\n          that.setState({\n            pres: pres,\n            presPoints: [...that.state.presPoints.slice(-10),pres], //that.state.Xpoint.push(x)\n            data:getData(that.state.presPoints)\n          });\n        });\n    \n    }\n\n}\n\nexport default BMPP;\n\n\nconst getData =(presPoints)=>({\n    labels: Array(presPoints.length).fill(\"\"),\n    datasets: [\n      {\n        label: 'Pressure',\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: presPoints\n        }\n    ]\n})","import React, { Component } from 'react';\n//import io from 'socket.io-client';\nimport {Navbar,NavItem,Col,Row} from \"react-materialize\"\nimport logo from './logo.svg';\nimport './App.css';\nimport BNOA from './Components/BNOA'\nimport PITOT from './Components/PITOT'\nimport BMPT from './Components/BMP/BMPT'\nimport BMPA from './Components/BMP/BMPA'\nimport BMPP from './Components/BMP/BMPP'\n\nvar io = require('socket.io-client');\nconst socket = io.connect('http://localhost:3000', {reconnect: true});\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n\n    }\n  }\n  componentDidMount(){\n\n  }\n  render() {\n    return (\n      <div>\n      <Navbar className=\"teal accent-3\" brand='Velocity' right>\n      </Navbar>\n      <Row>\n        <Col s={12} m={6}>\n          <BNOA socket={socket}/>\n        </Col>\n        <Col s={12} m={6}>\n          <PITOT socket={socket}/>\n        </Col>\n        <Col s={12} m={6}>\n          <BMPT socket={socket}/>\n        </Col>\n        <Col s={12} m={6}>\n          <BMPP socket={socket}/>\n        </Col>\n        <Col s={12} m={6}>\n          <BMPA socket={socket}/>\n        </Col>\n      </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}